{"ast":null,"code":"var _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Layout } from \"../components/Layout\";\nimport { Card } from \"../components/Card\";\nimport { Modal } from \"../components/Modal\";\nimport { Form } from \"../components/Form\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utils/constants\";\nimport { Buttons } from \"../components/Buttons\";\nexport default function Index() {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: isModalOpen,\n    1: setIsModalOpen\n  } = useState(false);\n  const {\n    0: currentPost,\n    1: setCurrentPost\n  } = useState(null);\n\n  const getPosts = async () => {\n    return await axios.get(BASE_URL);\n  };\n\n  useEffect(() => {\n    getPosts().then(({\n      data\n    }) => {\n      const postList = data.reverse();\n      console.log(postList);\n      setPosts(postList);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {});\n  }, []);\n\n  const handleClickEdit = id => {\n    setIsModalOpen(true);\n    setCurrentPost(posts.find(post => post.id === id));\n  };\n\n  const editPost = post => {\n    axios({\n      method: 'PUT',\n      url: `${BASE_URL}/${currentPost.id}`,\n      data: post\n    }).then(() => {\n      setPosts(posts.map(item => {\n        if (item.id === post.id) {\n          return post;\n        }\n\n        return item;\n      }));\n      setIsModalOpen(false);\n      setCurrentPost(null);\n    });\n  };\n\n  const handleClickDelete = id => {\n    axios.delete(`${BASE_URL}/${id}`).then(() => {\n      setPosts(posts.filter(post => post.id !== id));\n    });\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, posts.map(({\n    id,\n    title,\n    body\n  }) => __jsx(Card, {\n    key: id,\n    title: title,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, __jsx(Buttons, {\n    onEdit: () => handleClickEdit(id),\n    onDelete: () => handleClickDelete(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }\n  }), __jsx(PostBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, body)))), isModalOpen && __jsx(Modal, {\n    onClose: closeModal,\n    title: currentPost.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(Form, {\n    onSubmitForm: editPost,\n    currentPost: currentPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["F:/TestTasks/next-js/pages/index.js"],"names":["React","useEffect","useState","Layout","Card","Modal","Form","axios","BASE_URL","Buttons","Index","posts","setPosts","isModalOpen","setIsModalOpen","currentPost","setCurrentPost","getPosts","get","then","data","postList","reverse","console","log","catch","error","finally","handleClickEdit","id","find","post","editPost","method","url","map","item","handleClickDelete","delete","filter","closeModal","title","body"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Layout } from \"../components/Layout\";\r\nimport { Card } from \"../components/Card\";\r\nimport { Modal } from \"../components/Modal\";\r\nimport { Form } from \"../components/Form\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"../utils/constants\";\r\nimport { Buttons } from \"../components/Buttons\";\r\n\r\n\r\n\r\nexport default function Index() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [currentPost, setCurrentPost] = useState(null);\r\n  \r\n  const getPosts = async () => {\r\n    return await axios\r\n    .get(BASE_URL);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts().then(({ data }) => {\r\n      const postList = data.reverse();\r\n      console.log(postList);\r\n      setPosts(postList);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n    .finally(function () {});\r\n  }, []);\r\n\r\n  const handleClickEdit = (id) => {\r\n    setIsModalOpen(true);\r\n    setCurrentPost(posts.find((post) => post.id === id));\r\n  };\r\n\r\n  const editPost = (post) => {\r\n    axios({\r\n      method: 'PUT',\r\n      url: `${BASE_URL}/${currentPost.id}`,\r\n      data: post,\r\n    }).then(() => {\r\n      setPosts(posts.map(item => {\r\n        if(item.id === post.id){\r\n          return post;\r\n        }\r\n\r\n        return item;\r\n      }));\r\n      setIsModalOpen(false);\r\n      setCurrentPost(null);\r\n    });\r\n  };\r\n\r\n  const handleClickDelete = (id) => {\r\n    axios.delete(`${BASE_URL}/${id}`).then(() => {\r\n      setPosts(posts.filter((post) => post.id !== id));\r\n    });\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  \r\n  return (\r\n    <Layout>\r\n      <List>\r\n        {posts.map(({ id, title, body }) => (\r\n          <Card key={id} title={title} id={id}>\r\n           <Buttons\r\n             onEdit={() => handleClickEdit(id)}\r\n             onDelete={() => handleClickDelete(id)}\r\n           />\r\n            <PostBody>{body}</PostBody>\r\n          </Card>\r\n        ))}\r\n      {/*    <Card key={`${post.id}-${post.title} `} title={post.title} id={post.id} isLink>*/}\r\n      </List>\r\n    \r\n      {isModalOpen && (\r\n        <Modal onClose={closeModal} title={currentPost.title}>\r\n          <Form onSubmitForm={editPost} currentPost={currentPost}/>\r\n        </Modal>\r\n      )}\r\n    </Layout>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}