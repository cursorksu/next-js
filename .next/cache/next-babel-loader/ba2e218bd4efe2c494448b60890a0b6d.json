{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { List, PostBody } from './PostListStyles';\nimport { Card } from '../Card';\nimport { Modal } from '../Modal';\nimport { Form } from '../Form';\nimport { Buttons } from '../Buttons';\nimport { BASE_URL } from '../../utils/constants';\nexport var PostList = function PostList(_ref) {\n  var postList = _ref.postList;\n\n  var _useState = useState(postList),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  var _useState2 = useState(false),\n      isModalOpen = _useState2[0],\n      setIsModalOpen = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentPost = _useState3[0],\n      setCurrentPost = _useState3[1];\n\n  var deletePost = function deletePost(id) {\n    return _regeneratorRuntime.async(function deletePost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios[\"delete\"](\"https://simple-blog-api.crew.red/posts/\".concat(id)));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL).then(function (_ref2) {\n              var data = _ref2.data;\n              setPosts(data.reverse());\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleClickDelete = function handleClickDelete(id) {\n    deletePost(id).then(function () {\n      setPosts(posts.filter(function (post) {\n        return post.id !== id;\n      }));\n    });\n  };\n\n  var handleClickEdit = function handleClickEdit(id) {\n    setIsModalOpen(true);\n    setCurrentPost(postList.find(function (post) {\n      return post.id === id;\n    }));\n  };\n\n  var editPost = function editPost(post) {\n    return _regeneratorRuntime.async(function editPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'PUT',\n              url: \"\".concat(BASE_URL, \"/\").concat(currentPost.id),\n              data: post\n            }).then(function () {\n              setIsModalOpen(false);\n              setCurrentPost(null);\n            }));\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL).then(function (_ref3) {\n              var data = _ref3.data;\n              setPosts(data.reverse());\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var closeModal = function closeModal() {\n    setIsModalOpen(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(List, null, posts.map(function (_ref4) {\n    var id = _ref4.id,\n        title = _ref4.title,\n        body = _ref4.body;\n    return __jsx(Card, {\n      key: id,\n      title: title,\n      id: id\n    }, __jsx(Buttons, {\n      onEdit: function onEdit() {\n        return handleClickEdit(id);\n      },\n      onDelete: function onDelete() {\n        return handleClickDelete(id);\n      }\n    }), __jsx(PostBody, null, body));\n  })), isModalOpen && __jsx(Modal, {\n    onClose: closeModal,\n    title: currentPost.title\n  }, __jsx(Form, {\n    onSubmitForm: editPost,\n    currentPost: currentPost\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}