{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\Form\\\\Form.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { v4 } from 'uuid';\nimport { errorMess } from '../../pages/styles/PostStyles';\nimport { Label, Input, Textarea, Button } from './FormStyles';\nexport var Form = function Form(_ref) {\n  var onSubmitForm = _ref.onSubmitForm,\n      currentPost = _ref.currentPost;\n\n  var _useState = useState(currentPost || {\n    id: '',\n    title: '',\n    body: ''\n  }),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var handleSubmitCreate = function handleSubmitCreate(e) {\n    return _regeneratorRuntime.async(function handleSubmitCreate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (!(!post.title || !post.body)) {\n              _context.next = 4;\n              break;\n            }\n\n            setError('Why do you want to send an empty post? Write something!');\n            return _context.abrupt(\"return\");\n\n          case 4:\n            onSubmitForm(post);\n            setPost({\n              id: '',\n              title: '',\n              body: ''\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleTitle = function handleTitle(event) {\n    var id = v4().substring(0, 6);\n    setError('');\n    setPost(_objectSpread({}, post, {\n      id: id,\n      title: event.target.value\n    }));\n  };\n\n  var handleBody = function handleBody(event) {\n    setError('');\n    setPost(_objectSpread({}, post, {\n      body: event.target.value\n    }));\n  };\n\n  return __jsx(\"form\", {\n    action: \"#\",\n    onSubmit: handleSubmitCreate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, error && __jsx(errorMess.TitleError, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, error), __jsx(Label, {\n    htmlFor: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Post`s title\"), __jsx(Input, {\n    placeholder: \"Input Title of Post\",\n    id: \"title\",\n    type: \"text\",\n    value: post.title,\n    onChange: handleTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), __jsx(Label, {\n    htmlFor: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Post`s text\"), __jsx(Textarea, {\n    placeholder: \"Input Body of Post\",\n    id: \"body\",\n    value: post.body,\n    onChange: handleBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, currentPost ? 'Edit post' : 'Create post'));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/Form/Form.tsx"],"names":["React","useState","v4","errorMess","Label","Input","Textarea","Button","Form","onSubmitForm","currentPost","id","title","body","post","setPost","error","setError","handleSubmitCreate","e","preventDefault","handleTitle","event","substring","target","value","handleBody"],"mappings":"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","sourcesContent":["import React, { useState, FC } from 'react';\nimport { v4 } from 'uuid';\nimport { errorMess } from '../../pages/styles/PostStyles';\nimport { Label, Input, Textarea, Button } from './FormStyles';\nimport { Post } from '../../utils/interfaces';\n\ninterface Props {\n  onSubmitForm: (post?: Post) => void;\n  currentPost?: Post;\n}\n\nexport const Form: FC<Props> = ({ onSubmitForm, currentPost }) => {\n  const [post, setPost] = useState(\n    currentPost || { id: '', title: '', body: '' },\n  );\n  const [error, setError] = useState('');\n\n  const handleSubmitCreate = async (e) => {\n    e.preventDefault();\n\n    if (!post.title || !post.body) {\n      setError('Why do you want to send an empty post? Write something!');\n\n      return;\n    }\n\n    onSubmitForm(post);\n    setPost({ id: '', title: '', body: '' });\n  };\n\n  const handleTitle = (event) => {\n    const id = v4().substring(0, 6);\n\n    setError('');\n    setPost({\n      ...post,\n      id,\n      title: event.target.value,\n    });\n  };\n\n  const handleBody = (event) => {\n    setError('');\n    setPost({\n      ...post,\n      body: event.target.value,\n    });\n  };\n\n  return (\n    <form action=\"#\" onSubmit={handleSubmitCreate}>\n      {error && <errorMess.TitleError>{error}</errorMess.TitleError>}\n      <Label htmlFor=\"title\">\n        <p>Post`s title</p>\n        <Input\n          placeholder=\"Input Title of Post\"\n          id=\"title\"\n          type=\"text\"\n          value={post.title}\n          onChange={handleTitle}\n        />\n      </Label>\n      <Label htmlFor=\"body\">\n        <p>Post`s text</p>\n        <Textarea\n          placeholder=\"Input Body of Post\"\n          id=\"body\"\n          value={post.body}\n          onChange={handleBody}\n        />\n      </Label>\n      <Button type=\"submit\">{currentPost ? 'Edit post' : 'Create post'}</Button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}