{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\pages\\\\new.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { v4 } from 'uuid';\nimport axios from 'axios';\nimport { Modal } from '../components/Modal';\nimport { Layout } from '../components/Layout';\nimport { Card } from '../components/Card';\nimport { errorMess, newPost } from './styles/PostStyles';\nvar BASE_URL = 'https://simple-blog-api.crew.red/posts';\nexport default function New() {\n  var _useState = useState({\n    id: 0,\n    title: '',\n    body: ''\n  }),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      isModalOpen = _useState3[0],\n      setIsModalOpen = _useState3[1];\n\n  var handleSubmitCreate = function handleSubmitCreate(e) {\n    return _regeneratorRuntime.async(function handleSubmitCreate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (!(!post.title || !post.body)) {\n              _context.next = 4;\n              break;\n            }\n\n            setError('Why do you want to send an empty post? Write something!');\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'post',\n              url: \"\".concat(BASE_URL),\n              data: post\n            }));\n\n          case 6:\n            setIsModalOpen(true);\n            setPost({\n              id: 0,\n              title: '',\n              body: ''\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleTitle = function handleTitle(event) {\n    var id = v4().substring(0, 6);\n    setError('');\n    setPost(_objectSpread({}, post, {\n      id: id,\n      title: event.target.value\n    }));\n  };\n\n  var handleBody = function handleBody(event) {\n    setError('');\n    setPost(_objectSpread({}, post, {\n      body: event.target.value\n    }));\n  };\n\n  var closeModal = function closeModal() {\n    setIsModalOpen(false);\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    title: \"Create new post now!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, __jsx(\"form\", {\n    action: \"#\",\n    onSubmit: handleSubmitCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, error && __jsx(errorMess.TitleError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }\n  }, error), __jsx(newPost.Label, {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }\n  }, \"Post`s title\"), __jsx(newPost.Input, {\n    placeholder: \"Input Title of Post\",\n    id: \"title\",\n    type: \"text\",\n    value: post.title,\n    onChange: handleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  })), __jsx(newPost.Label, {\n    htmlFor: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, \"Post`s text\"), __jsx(newPost.Textarea, {\n    placeholder: \"Input Body of Post\",\n    id: \"body\",\n    value: post.body,\n    onChange: handleBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  })), __jsx(newPost.Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Create post\"))), isModalOpen && __jsx(Modal, {\n    onClose: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }));\n}","map":{"version":3,"sources":["F:/TestTasks/next-js/pages/new.tsx"],"names":["React","useState","v4","axios","Modal","Layout","Card","errorMess","newPost","BASE_URL","New","id","title","body","post","setPost","error","setError","isModalOpen","setIsModalOpen","handleSubmitCreate","e","preventDefault","method","url","data","handleTitle","event","substring","target","value","handleBody","closeModal"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAwB,sBAAxB;AACA,SAASC,IAAT,QAAsB,oBAAtB;AACA,SAAeC,SAAf,EAA0BC,OAA1B,QAAyC,qBAAzC;AAEA,IAAMC,QAAQ,GAAE,wCAAhB;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACHT,QAAQ,CAAC;AAAEU,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,EAAhB;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAAD,CADL;AAAA,MACpBC,IADoB;AAAA,MACdC,OADc;;AAAA,mBAEDd,QAAQ,CAAC,EAAD,CAFP;AAAA,MAEpBe,KAFoB;AAAA,MAEbC,QAFa;;AAAA,mBAGWhB,QAAQ,CAAC,KAAD,CAHnB;AAAA,MAGpBiB,WAHoB;AAAA,MAGPC,cAHO;;AAK1B,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AACvBA,YAAAA,CAAC,CAACC,cAAF;;AADuB,kBAGpB,CAACR,IAAI,CAACF,KAAN,IAAe,CAACE,IAAI,CAACD,IAHD;AAAA;AAAA;AAAA;;AAInBI,YAAAA,QAAQ,CAAC,yDAAD,CAAR;AAJmB;;AAAA;AAAA;AAAA,6CAQjBd,KAAK,CAAC;AACRoB,cAAAA,MAAM,EAAE,MADA;AAERC,cAAAA,GAAG,YAAKf,QAAL,CAFK;AAGRgB,cAAAA,IAAI,EAAEX;AAHE,aAAD,CARY;;AAAA;AAevBK,YAAAA,cAAc,CAAC,IAAD,CAAd;AACAJ,YAAAA,OAAO,CAAC;AAAEJ,cAAAA,EAAE,EAAE,CAAN;AAASC,cAAAA,KAAK,EAAE,EAAhB;AAAoBC,cAAAA,IAAI,EAAE;AAA1B,aAAD,CAAP;;AAhBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAmBA,MAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC3B,QAAMhB,EAAE,GAAGT,EAAE,GAAG0B,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAX;AACAX,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,IAAAA,OAAO,mBACAD,IADA;AAEHH,MAAAA,EAAE,EAAEA,EAFD;AAGHC,MAAAA,KAAK,EAAEe,KAAK,CAACE,MAAN,CAAaC;AAHjB,OAAP;AAKH,GARD;;AAUA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACJ,KAAD,EAAW;AAC1BV,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,IAAAA,OAAO,mBACAD,IADA;AAEHD,MAAAA,IAAI,EAAEc,KAAK,CAACE,MAAN,CAAaC;AAFhB,OAAP;AAIH,GAND;;AAQA,MAAME,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBb,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAFD;;AAIA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,sBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,MAAM,EAAC,GAAb;AAAiB,IAAA,QAAQ,EAAEC,kBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,KAAK,IAAI,MAAC,SAAD,CAAW,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBA,KAAvB,CADd,EAEE,MAAC,OAAD,CAAS,KAAT;AAAe,IAAA,OAAO,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,OAAD,CAAS,KAAT;AACE,IAAA,WAAW,EAAC,qBADd;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAEF,IAAI,CAACF,KAJd;AAKE,IAAA,QAAQ,EAAEc,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,EAYE,MAAC,OAAD,CAAS,KAAT;AAAe,IAAA,OAAO,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,MAAC,OAAD,CAAS,QAAT;AACE,IAAA,WAAW,EAAC,oBADd;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,KAAK,EAAEZ,IAAI,CAACD,IAHd;AAIE,IAAA,QAAQ,EAAEkB,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAZF,EAqBE,MAAC,OAAD,CAAS,MAAT;AAAgB,IAAA,IAAI,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBArBF,CADF,CADJ,EA0BKb,WAAW,IAAI,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEc,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BpB,CADJ;AA8BH","sourcesContent":["import React, { useState } from 'react';\r\nimport { v4 } from 'uuid';\r\nimport axios from 'axios';\r\nimport { Modal  } from '../components/Modal';\r\nimport { Layout  } from '../components/Layout';\r\nimport { Card  } from '../components/Card';\r\nimport { list, errorMess, newPost } from './styles/PostStyles';\r\n\r\nconst BASE_URL ='https://simple-blog-api.crew.red/posts';\r\n\r\nexport default function New() {\r\n    const[post, setPost] = useState({ id: 0, title: '', body: ''});\r\n    const[error, setError] = useState('');\r\n    const[isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const handleSubmitCreate = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!post.title || !post.body) {\r\n            setError('Why do you want to send an empty post? Write something!');\r\n            return;\r\n        }\r\n\r\n        await axios({\r\n            method: 'post',\r\n            url: `${BASE_URL}`,\r\n            data: post,\r\n        });\r\n\r\n\r\n        setIsModalOpen(true);\r\n        setPost({ id: 0, title: '', body: ''});\r\n    };\r\n\r\n    const handleTitle = (event) => {\r\n        const id = v4().substring(0, 6);\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            id: id,\r\n            title: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleBody = (event) => {\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            body: event.target.value,\r\n        });\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Card title=\"Create new post now!\">\r\n              <form action=\"#\" onSubmit={handleSubmitCreate}>\r\n                  {error && <errorMess.TitleError>{error}</errorMess.TitleError>}\r\n                <newPost.Label htmlFor=\"title\">\r\n                  <p>Post`s title</p>\r\n                  <newPost.Input\r\n                    placeholder=\"Input Title of Post\"\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    value={post.title}\r\n                    onChange={handleTitle}\r\n                  />\r\n                </newPost.Label>\r\n                <newPost.Label htmlFor=\"body\">\r\n                  <p>Post`s text</p>\r\n                  <newPost.Textarea\r\n                    placeholder=\"Input Body of Post\"\r\n                    id=\"body\"\r\n                    value={post.body}\r\n                    onChange={handleBody}\r\n                  />\r\n                </newPost.Label>\r\n                <newPost.Button type=\"submit\">Create post</newPost.Button>\r\n              </form>\r\n            </Card>\r\n            {isModalOpen && <Modal onClose={closeModal}/>}\r\n        </Layout>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}