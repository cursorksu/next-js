{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\PostList\\\\PostList.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { List, PostBody } from \"./PostListStyles\";\nimport { Card } from \"../Card\";\nimport { Modal } from \"../Modal\";\nimport { Form } from \"../Form\";\nimport { Buttons } from \"../Buttons\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../utils/constants\";\nexport var PostList = function PostList(_ref) {\n  var postList = _ref.postList,\n      onChangedPosts = _ref.onChangedPosts;\n\n  var _useState = useState(postList),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  var _useState2 = useState(false),\n      isModalOpen = _useState2[0],\n      setIsModalOpen = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentPost = _useState3[0],\n      setCurrentPost = _useState3[1];\n\n  var handleClickDelete = function handleClickDelete(id) {\n    axios[\"delete\"](\"\".concat(BASE_URL, \"/\").concat(id)).then(function () {\n      onChangedPosts(postList.filter(function (post) {\n        return post.id !== id;\n      }));\n    });\n  };\n\n  var handleClickEdit = function handleClickEdit(id) {\n    setIsModalOpen(true);\n    setCurrentPost(postList.find(function (post) {\n      return post.id === id;\n    }));\n  };\n\n  var editPost = function editPost(post) {\n    return _regeneratorRuntime.async(function editPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(post);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'PUT',\n              url: \"\".concat(BASE_URL, \"/\").concat(currentPost.id),\n              data: post\n            }).then(function () {\n              console.log({\n                postList: postList\n              });\n              onChangedPosts(postList.map(function (item) {\n                if (item.id === post.id) {\n                  return post;\n                }\n\n                return item;\n              }));\n              setIsModalOpen(false);\n              setCurrentPost(null);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var closeModal = function closeModal() {\n    setIsModalOpen(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(List, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, posts.map(function (_ref2) {\n    var id = _ref2.id,\n        title = _ref2.title,\n        body = _ref2.body;\n    return __jsx(Card, {\n      key: id,\n      title: title,\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, __jsx(Buttons, {\n      onEdit: function onEdit() {\n        return handleClickEdit(id);\n      },\n      onDelete: function onDelete() {\n        return handleClickDelete(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }), __jsx(PostBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }, body));\n  })), isModalOpen && __jsx(Modal, {\n    onClose: closeModal,\n    title: currentPost.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, __jsx(Form, {\n    onSubmitForm: editPost,\n    currentPost: currentPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  })));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/PostList/PostList.tsx"],"names":["React","useState","List","PostBody","Card","Modal","Form","Buttons","axios","BASE_URL","PostList","postList","onChangedPosts","posts","setPosts","isModalOpen","setIsModalOpen","currentPost","setCurrentPost","handleClickDelete","id","then","filter","post","handleClickEdit","find","editPost","console","log","method","url","data","map","item","closeModal","title","body"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { List, PostBody } from \"./PostListStyles\";\nimport { Card } from \"../Card\";\nimport { Modal } from \"../Modal\";\nimport { Form } from \"../Form\";\nimport { Buttons } from \"../Buttons\";\nimport axios from \"axios\";\nimport {BASE_URL} from \"../../utils/constants\";\n\nexport const PostList = ({ postList, onChangedPosts }) => {\n    const [posts, setPosts] = useState(postList);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [currentPost, setCurrentPost] = useState(null);\n\n    const handleClickDelete = (id) => {\n        axios.delete(`${BASE_URL}/${id}`).then(() => {\n            onChangedPosts(postList.filter((post) => post.id !== id));\n        });\n    };\n\n    const handleClickEdit = (id) => {\n        setIsModalOpen(true);\n        setCurrentPost(postList.find((post) => post.id === id));\n    };\n\n    const editPost = async (post) => {\n        console.log(post);\n        await axios({\n            method: 'PUT',\n            url: `${BASE_URL}/${currentPost.id}`,\n            data: post,\n        }).then(() => {\n            console.log({postList})\n            onChangedPosts(postList.map(item => {\n                if(item.id === post.id){\n                    return post;\n                }\n\n                return item;\n            }));\n            setIsModalOpen(false);\n            setCurrentPost(null);\n        });\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n    };\n\n    return (\n        <>\n            <List>\n                {posts.map(({ id, title, body }) => (\n                    <Card key={id} title={title} id={id}>\n                        <Buttons\n                            onEdit={() => handleClickEdit(id)}\n                            onDelete={() => handleClickDelete(id)}\n                        />\n                        <PostBody>{body}</PostBody>\n                    </Card>\n                ))}\n            </List>\n            {isModalOpen && (\n                <Modal onClose={closeModal} title={currentPost.title}>\n                    <Form onSubmitForm={editPost} currentPost={currentPost}/>\n                </Modal>\n            )}\n        </>\n\n    );\n};"]},"metadata":{},"sourceType":"module"}