{"ast":null,"code":"var _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\Form\\\\Form.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { v4 } from 'uuid';\nimport { Label, Input, Textarea, Button, ErrorMess } from './FormStyles';\nexport const Form = ({\n  onSubmitForm,\n  currentPost\n}) => {\n  const {\n    0: post,\n    1: setPost\n  } = useState(currentPost || {\n    id: '',\n    title: '',\n    body: ''\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n\n  const handleSubmitCreate = async e => {\n    e.preventDefault();\n\n    if (!post.title || !post.body) {\n      setError('Why do you want to send an empty post? Write something!');\n      return;\n    }\n\n    onSubmitForm(post);\n    setPost({\n      id: '',\n      title: '',\n      body: ''\n    });\n  };\n\n  const handleTitle = event => {\n    const id = v4().substring(0, 6);\n    setError('');\n    setPost(_objectSpread({}, post, {\n      id,\n      title: event.target.value.trim()\n    }));\n  };\n\n  const handleBody = event => {\n    setError('');\n    setPost(_objectSpread({}, post, {\n      body: event.target.value.trim()\n    }));\n  };\n\n  return __jsx(\"form\", {\n    action: \"#\",\n    onSubmit: handleSubmitCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, error && __jsx(ErrorMess, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, error), __jsx(Label, {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Post`s title\"), __jsx(Input, {\n    placeholder: \"Input Title of Post\",\n    id: \"title\",\n    type: \"text\",\n    value: post.title,\n    onChange: handleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), __jsx(Label, {\n    htmlFor: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Post`s text\"), __jsx(Textarea, {\n    placeholder: \"Input Body of Post\",\n    id: \"body\",\n    value: post.body,\n    onChange: handleBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, currentPost ? 'Edit post' : 'Create post'));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/Form/Form.tsx"],"names":["React","useState","v4","Label","Input","Textarea","Button","ErrorMess","Form","onSubmitForm","currentPost","post","setPost","id","title","body","error","setError","handleSubmitCreate","e","preventDefault","handleTitle","event","substring","target","value","trim","handleBody"],"mappings":"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","sourcesContent":["import React, { useState, FC } from 'react';\nimport { v4 } from 'uuid';\nimport { Label, Input, Textarea, Button, ErrorMess } from './FormStyles';\nimport { Post } from '../../utils/interfaces';\n\ninterface Props {\n  onSubmitForm: (post?: Post) => void;\n  currentPost?: Post;\n}\n\nexport const Form: FC<Props> = ({ onSubmitForm, currentPost }) => {\n  const [post, setPost] = useState(\n    currentPost || { id: '', title: '', body: '' },\n  );\n  const [error, setError] = useState('');\n\n  const handleSubmitCreate = async (e) => {\n    e.preventDefault();\n\n    if (!post.title || !post.body) {\n      setError('Why do you want to send an empty post? Write something!');\n\n      return;\n    }\n\n    onSubmitForm(post);\n    setPost({ id: '', title: '', body: '' });\n  };\n\n  const handleTitle = (event) => {\n    const id = v4().substring(0, 6);\n\n    setError('');\n    setPost({\n      ...post,\n      id,\n      title: event.target.value.trim(),\n    });\n  };\n\n  const handleBody = (event) => {\n    setError('');\n    setPost({\n      ...post,\n      body: event.target.value.trim(),\n    });\n  };\n\n  return (\n    <form action=\"#\" onSubmit={handleSubmitCreate}>\n      {error && <ErrorMess>{error}</ErrorMess>}\n      <Label htmlFor=\"title\">\n        <p>Post`s title</p>\n        <Input\n          placeholder=\"Input Title of Post\"\n          id=\"title\"\n          type=\"text\"\n          value={post.title}\n          onChange={handleTitle}\n        />\n      </Label>\n      <Label htmlFor=\"body\">\n        <p>Post`s text</p>\n        <Textarea\n          placeholder=\"Input Body of Post\"\n          id=\"body\"\n          value={post.body}\n          onChange={handleBody}\n        />\n      </Label>\n      <Button type=\"submit\">{currentPost ? 'Edit post' : 'Create post'}</Button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}