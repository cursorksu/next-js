{"ast":null,"code":"var _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\Form\\\\Form.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { errorMess, newPost } from \"../../pages/styles/PostStyles\";\nimport { v4 } from 'uuid';\nexport const Form = ({\n  onSubmitForm,\n  currentPost\n}) => {\n  const {\n    0: post,\n    1: setPost\n  } = useState(currentPost ? currentPost : {\n    id: '',\n    title: '',\n    body: ''\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n\n  const handleSubmitCreate = async e => {\n    e.preventDefault();\n\n    if (!post.title || !post.body) {\n      setError('Why do you want to send an empty post? Write something!');\n      return;\n    }\n\n    onSubmitForm(post);\n    setPost({\n      id: '',\n      title: '',\n      body: ''\n    });\n  };\n\n  const handleTitle = event => {\n    const id = v4().substring(0, 6);\n    setError('');\n    setPost(_objectSpread({}, post, {\n      id: id,\n      title: event.target.value\n    }));\n  };\n\n  const handleBody = event => {\n    setError('');\n    setPost(_objectSpread({}, post, {\n      body: event.target.value\n    }));\n  };\n\n  return __jsx(\"form\", {\n    action: \"#\",\n    onSubmit: handleSubmitCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, error && __jsx(errorMess.TitleError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  }, error), __jsx(newPost.Label, {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Post`s title\"), __jsx(newPost.Input, {\n    placeholder: \"Input Title of Post\",\n    id: \"title\",\n    type: \"text\",\n    value: post.title,\n    onChange: handleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  })), __jsx(newPost.Label, {\n    htmlFor: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Post`s text\"), __jsx(newPost.Textarea, {\n    placeholder: \"Input Body of Post\",\n    id: \"body\",\n    value: post.body,\n    onChange: handleBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })), __jsx(newPost.Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, currentPost ? 'Edit post' : 'Create post'));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/Form/Form.tsx"],"names":["React","useState","errorMess","newPost","v4","Form","onSubmitForm","currentPost","post","setPost","id","title","body","error","setError","handleSubmitCreate","e","preventDefault","handleTitle","event","substring","target","value","handleBody"],"mappings":"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","sourcesContent":["import React, {useState, FC} from 'react';\r\nimport {errorMess, newPost} from \"../../pages/styles/PostStyles\";\r\nimport axios from \"axios\";\r\nimport { v4 } from 'uuid';\r\n\r\n\r\ninterface Post {\r\n    id: string|number;\r\n    title: string;\r\n    body: string;\r\n}\r\n\r\ninterface Props {\r\n    onSubmitForm: (post?: Post) => void;\r\n    currentPost?: Post;\r\n}\r\n\r\nexport const Form: FC<Props> = ({ onSubmitForm, currentPost }) => {\r\n    const[post, setPost] = useState(currentPost ? currentPost : { id: '', title: '', body: ''});\r\n    const[error, setError] = useState('');\r\n\r\n    const handleSubmitCreate = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!post.title || !post.body) {\r\n            setError('Why do you want to send an empty post? Write something!');\r\n            return;\r\n        }\r\n\r\n        onSubmitForm(post);\r\n        setPost({ id: '', title: '', body: ''});\r\n    };\r\n\r\n    const handleTitle = (event) => {\r\n        const id = v4().substring(0, 6);\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            id: id,\r\n            title: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleBody = (event) => {\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            body: event.target.value,\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <form action=\"#\" onSubmit={handleSubmitCreate}>\r\n            {error && <errorMess.TitleError>{error}</errorMess.TitleError>}\r\n            <newPost.Label htmlFor=\"title\">\r\n                <p>Post`s title</p>\r\n                <newPost.Input\r\n                    placeholder=\"Input Title of Post\"\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    value={post.title}\r\n                    onChange={handleTitle}\r\n                />\r\n            </newPost.Label>\r\n            <newPost.Label htmlFor=\"body\">\r\n                <p>Post`s text</p>\r\n                <newPost.Textarea\r\n                    placeholder=\"Input Body of Post\"\r\n                    id=\"body\"\r\n                    value={post.body}\r\n                    onChange={handleBody}\r\n                />\r\n            </newPost.Label>\r\n            <newPost.Button type=\"submit\">{currentPost ? 'Edit post' : 'Create post'}</newPost.Button>\r\n        </form>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}