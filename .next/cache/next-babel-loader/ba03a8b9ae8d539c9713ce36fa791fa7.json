{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\Form\\\\Form.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { errorMess, newPost } from \"../../pages/styles/PostStyles\";\nimport { v4 } from 'uuid';\nexport var Form = function Form(_ref) {\n  var onSubmitForm = _ref.onSubmitForm,\n      currentPost = _ref.currentPost;\n\n  var _useState = useState(currentPost ? currentPost : {\n    id: 0,\n    title: '',\n    body: ''\n  }),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var handleSubmitCreate = function handleSubmitCreate(e) {\n    return _regeneratorRuntime.async(function handleSubmitCreate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (!(!post.title || !post.body)) {\n              _context.next = 4;\n              break;\n            }\n\n            setError('Why do you want to send an empty post? Write something!');\n            return _context.abrupt(\"return\");\n\n          case 4:\n            onSubmitForm(post);\n            setPost({\n              id: 0,\n              title: '',\n              body: ''\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleTitle = function handleTitle(event) {\n    var id = v4().substring(0, 6);\n    setError('');\n    setPost(_objectSpread({}, post, {\n      id: id,\n      title: event.target.value\n    }));\n  };\n\n  var handleBody = function handleBody(event) {\n    setError('');\n    setPost(_objectSpread({}, post, {\n      body: event.target.value\n    }));\n  };\n\n  return __jsx(\"form\", {\n    action: \"#\",\n    onSubmit: handleSubmitCreate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, error && __jsx(errorMess.TitleError, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }\n  }, error), __jsx(newPost.Label, {\n    htmlFor: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Post`s title\"), __jsx(newPost.Input, {\n    placeholder: \"Input Title of Post\",\n    id: \"title\",\n    type: \"text\",\n    value: post.title,\n    onChange: handleTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })), __jsx(newPost.Label, {\n    htmlFor: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Post`s text\"), __jsx(newPost.Textarea, {\n    placeholder: \"Input Body of Post\",\n    id: \"body\",\n    value: post.body,\n    onChange: handleBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })), __jsx(newPost.Button, {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"Create post\"));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/Form/Form.tsx"],"names":["React","useState","errorMess","newPost","v4","Form","onSubmitForm","currentPost","id","title","body","post","setPost","error","setError","handleSubmitCreate","e","preventDefault","handleTitle","event","substring","target","value","handleBody"],"mappings":"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","sourcesContent":["import React, {useState, FC} from 'react';\r\nimport {errorMess, newPost} from \"../../pages/styles/PostStyles\";\r\nimport axios from \"axios\";\r\nimport { v4 } from 'uuid';\r\n\r\n\r\ninterface Props {\r\n    onSubmitForm(): void;\r\n    currentPost?: Post;\r\n}\r\n\r\nexport const Form: FC<Props> = ({ onSubmitForm, currentPost }) => {\r\n    const[post, setPost] = useState(currentPost ? currentPost : { id: 0, title: '', body: ''});\r\n    const[error, setError] = useState('');\r\n\r\n    const handleSubmitCreate = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!post.title || !post.body) {\r\n            setError('Why do you want to send an empty post? Write something!');\r\n            return;\r\n        }\r\n\r\n        onSubmitForm(post);\r\n        setPost({ id: 0, title: '', body: ''});\r\n    };\r\n\r\n    const handleTitle = (event) => {\r\n        const id = v4().substring(0, 6);\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            id: id,\r\n            title: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleBody = (event) => {\r\n        setError('');\r\n        setPost({\r\n            ...post,\r\n            body: event.target.value,\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <form action=\"#\" onSubmit={handleSubmitCreate}>\r\n            {error && <errorMess.TitleError>{error}</errorMess.TitleError>}\r\n            <newPost.Label htmlFor=\"title\">\r\n                <p>Post`s title</p>\r\n                <newPost.Input\r\n                    placeholder=\"Input Title of Post\"\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    value={post.title}\r\n                    onChange={handleTitle}\r\n                />\r\n            </newPost.Label>\r\n            <newPost.Label htmlFor=\"body\">\r\n                <p>Post`s text</p>\r\n                <newPost.Textarea\r\n                    placeholder=\"Input Body of Post\"\r\n                    id=\"body\"\r\n                    value={post.body}\r\n                    onChange={handleBody}\r\n                />\r\n            </newPost.Label>\r\n            <newPost.Button type=\"submit\">Create post</newPost.Button>\r\n        </form>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}