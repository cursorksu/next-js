{"ast":null,"code":"var _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Layout } from \"../components/Layout\";\nimport { PostList } from \"../components/PostList\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utils/constants\";\nexport default function Index() {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: isModalOpen,\n    1: setIsModalOpen\n  } = useState(false);\n  const {\n    0: currentPost,\n    1: setCurrentPost\n  } = useState(null);\n\n  const getPosts = async () => {\n    return await axios.get(BASE_URL);\n  };\n\n  useEffect(() => {\n    getPosts().then(({\n      data\n    }) => {\n      const postList = data.reverse();\n      console.log(postList);\n      setPosts(postList);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {});\n  }, []);\n\n  const handleClickEdit = id => {\n    setIsModalOpen(true);\n    setCurrentPost(posts.find(post => post.id === id));\n  };\n\n  const editPost = post => {\n    axios({\n      method: 'PUT',\n      url: `${BASE_URL}/${currentPost.id}`,\n      data: post\n    }).then(() => {\n      setPosts(posts.map(item => {\n        if (item.id === post.id) {\n          return post;\n        }\n\n        return item;\n      }));\n      setIsModalOpen(false);\n      setCurrentPost(null);\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(PostList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["F:/TestTasks/next-js/pages/index.js"],"names":["React","useEffect","useState","Layout","PostList","axios","BASE_URL","Index","posts","setPosts","isModalOpen","setIsModalOpen","currentPost","setCurrentPost","getPosts","get","then","data","postList","reverse","console","log","catch","error","finally","handleClickEdit","id","find","post","editPost","method","url","map","item"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAKA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,IAAD,CAA9C;;AAEA,QAAMY,QAAQ,GAAG,YAAY;AAC3B,WAAO,MAAMT,KAAK,CACjBU,GADY,CACRT,QADQ,CAAb;AAED,GAHD;;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,GAAGE,IAAX,CAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC5B,YAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,EAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAT,MAAAA,QAAQ,CAACS,QAAD,CAAR;AACD,KAJD,EAKCI,KALD,CAKO,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KAPD,EAQCC,OARD,CAQS,YAAY,CAAE,CARvB;AASD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMC,eAAe,GAAIC,EAAD,IAAQ;AAC9Bf,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,cAAc,CAACL,KAAK,CAACmB,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAjC,CAAD,CAAd;AACD,GAHD;;AAKA,QAAMG,QAAQ,GAAID,IAAD,IAAU;AACzBvB,IAAAA,KAAK,CAAC;AACJyB,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAG,GAAEzB,QAAS,IAAGM,WAAW,CAACc,EAAG,EAF/B;AAGJT,MAAAA,IAAI,EAAEW;AAHF,KAAD,CAAL,CAIGZ,IAJH,CAIQ,MAAM;AACZP,MAAAA,QAAQ,CAACD,KAAK,CAACwB,GAAN,CAAUC,IAAI,IAAI;AACzB,YAAGA,IAAI,CAACP,EAAL,KAAYE,IAAI,CAACF,EAApB,EAAuB;AACrB,iBAAOE,IAAP;AACD;;AAED,eAAOK,IAAP;AACD,OANQ,CAAD,CAAR;AAOAtB,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAdD;AAeD,GAhBD;;AAkBA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Layout } from \"../components/Layout\";\r\nimport { PostList } from \"../components/PostList\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"../utils/constants\";\r\n\r\n\r\n\r\n\r\nexport default function Index() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [currentPost, setCurrentPost] = useState(null);\r\n  \r\n  const getPosts = async () => {\r\n    return await axios\r\n    .get(BASE_URL);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts().then(({ data }) => {\r\n      const postList = data.reverse();\r\n      console.log(postList);\r\n      setPosts(postList);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n    .finally(function () {});\r\n  }, []);\r\n\r\n  const handleClickEdit = (id) => {\r\n    setIsModalOpen(true);\r\n    setCurrentPost(posts.find((post) => post.id === id));\r\n  };\r\n\r\n  const editPost = (post) => {\r\n    axios({\r\n      method: 'PUT',\r\n      url: `${BASE_URL}/${currentPost.id}`,\r\n      data: post,\r\n    }).then(() => {\r\n      setPosts(posts.map(item => {\r\n        if(item.id === post.id){\r\n          return post;\r\n        }\r\n\r\n        return item;\r\n      }));\r\n      setIsModalOpen(false);\r\n      setCurrentPost(null);\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <Layout>\r\n      <PostList />\r\n    </Layout>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}