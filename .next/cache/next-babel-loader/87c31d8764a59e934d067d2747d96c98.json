{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\TestTasks\\\\next-js\\\\components\\\\PostList\\\\PostList.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { List, PostBody } from \"./PostListStyles\";\nimport { Card } from \"../Card\";\nimport { Modal } from \"../Modal\";\nimport { Form } from \"../Form\";\nimport { Buttons } from \"../Buttons\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../utils/constants\";\nexport var PostList = function PostList(_ref) {\n  var postList = _ref.postList;\n\n  var _useState = useState(postList),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  var _useState2 = useState(false),\n      isModalOpen = _useState2[0],\n      setIsModalOpen = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentPost = _useState3[0],\n      setCurrentPost = _useState3[1];\n\n  var handleClickDelete = function handleClickDelete(id) {\n    axios[\"delete\"](\"\".concat(BASE_URL, \"/\").concat(id)).then(function () {\n      setPosts(posts.filter(function (post) {\n        return post.id !== id;\n      }));\n    });\n  };\n\n  var handleClickEdit = function handleClickEdit(id) {\n    setIsModalOpen(true);\n    setCurrentPost(posts.find(function (post) {\n      return post.id === id;\n    }));\n  };\n\n  var setNewPosts = function setNewPosts() {\n    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setPosts(posts.map(function (item) {\n      if (item.id === id) {\n        return setCurrentPost;\n      }\n\n      return item;\n    }));\n  };\n\n  useEffect(function () {\n    setNewPosts(currentPost.id);\n  }, [currentPost]);\n\n  var editPost = function editPost(post) {\n    return _regeneratorRuntime.async(function editPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(post);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'PUT',\n              url: \"\".concat(BASE_URL, \"/\").concat(currentPost.id),\n              data: post\n            }).then(function () {\n              setIsModalOpen(false);\n              setCurrentPost(null);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var closeModal = function closeModal() {\n    setIsModalOpen(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(List, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, posts.map(function (_ref2) {\n    var id = _ref2.id,\n        title = _ref2.title,\n        body = _ref2.body;\n    return __jsx(Card, {\n      key: id,\n      title: title,\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, __jsx(Buttons, {\n      onEdit: function onEdit() {\n        return handleClickEdit(id);\n      },\n      onDelete: function onDelete() {\n        return handleClickDelete(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }), __jsx(PostBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, body));\n  })), isModalOpen && __jsx(Modal, {\n    onClose: closeModal,\n    title: currentPost.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(Form, {\n    onSubmitForm: editPost,\n    currentPost: currentPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  })));\n};","map":{"version":3,"sources":["F:/TestTasks/next-js/components/PostList/PostList.tsx"],"names":["React","useEffect","useState","List","PostBody","Card","Modal","Form","Buttons","axios","BASE_URL","PostList","postList","posts","setPosts","isModalOpen","setIsModalOpen","currentPost","setCurrentPost","handleClickDelete","id","then","filter","post","handleClickEdit","find","setNewPosts","map","item","editPost","console","log","method","url","data","closeModal","title","body"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { List, PostBody } from \"./PostListStyles\";\nimport { Card } from \"../Card\";\nimport { Modal } from \"../Modal\";\nimport { Form } from \"../Form\";\nimport { Buttons } from \"../Buttons\";\nimport axios from \"axios\";\nimport {BASE_URL} from \"../../utils/constants\";\n\nexport const PostList = ({ postList }) => {\n    const [posts, setPosts] = useState(postList);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [currentPost, setCurrentPost] = useState(null);\n\n    const handleClickDelete = (id) => {\n        axios.delete(`${BASE_URL}/${id}`).then(() => {\n            setPosts(posts.filter((post) => post.id !== id));\n        });\n    };\n\n    const handleClickEdit = (id) => {\n        setIsModalOpen(true);\n        setCurrentPost(posts.find((post) => post.id === id));\n    };\n\n    const setNewPosts = (id=0) => {\n        setPosts(posts.map(item => {\n            if(item.id === id){\n                return setCurrentPost;\n            }\n\n            return item;\n        }));\n    }\n\n    useEffect(() => {\n        setNewPosts(currentPost.id);\n    }, [currentPost])\n\n\n    const editPost = async (post) => {\n        console.log(post);\n        await axios({\n            method: 'PUT',\n            url: `${BASE_URL}/${currentPost.id}`,\n            data: post,\n        }).then(() => {\n            setIsModalOpen(false);\n            setCurrentPost(null);\n        });\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n    };\n\n    return (\n        <>\n            <List>\n                {posts.map(({ id, title, body }) => (\n                    <Card key={id} title={title} id={id}>\n                        <Buttons\n                            onEdit={() => handleClickEdit(id)}\n                            onDelete={() => handleClickDelete(id)}\n                        />\n                        <PostBody>{body}</PostBody>\n                    </Card>\n                ))}\n            </List>\n            {isModalOpen && (\n                <Modal onClose={closeModal} title={currentPost.title}>\n                    <Form onSubmitForm={editPost} currentPost={currentPost}/>\n                </Modal>\n            )}\n        </>\n\n    );\n};"]},"metadata":{},"sourceType":"module"}